#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    connect(ui->generateButton, SIGNAL(clicked()), this, SLOT(slot_GenerateProject()));
    connect(ui->sdkPath, SIGNAL(clicked()), this, SLOT(slot_SetSDKPath()));

    setMaximumSize(this->size());
    setMinimumSize(this->size());
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::slot_GenerateProject()
{
    m_ProjectDirectory = QFileDialog::getExistingDirectory(this, tr("Open Directory"),"/", QFileDialog::ShowDirsOnly | QFileDialog::DontResolveSymlinks);

    m_ProjectName = ui->projectName->text();
    m_ProjectDirectory = m_ProjectDirectory.append("/").append(m_ProjectName);
    m_Author = ui->author->text();

    qDebug() << "proj dir" << m_ProjectDirectory;

    if(m_ProjectName.size() == 0)
    {
        return;
    }

    QDir().mkdir(m_ProjectDirectory);

    //-------------------------------- .pro
    QString dotProPath = QString("%1/%2.pro").arg(m_ProjectDirectory).arg(m_ProjectName);
    QFile dotPro(dotProPath);
    dotPro.open(QIODevice::WriteOnly | QIODevice::Text);

    QTextStream out(&dotPro);
    out << "#------------------------------------------------------------------------\n";
    out << "#\n";
    out << "# Project generated by The Emerger from emergent.io\n";
    out << "#\n";
    out << "# " << QDateTime::currentDateTime().toString() << "\n";
    out << "#\n";
    out << "# " << m_Author <<"\n";
    out << "#\n";
    out << "#------------------------------------------------------------------------\n";
    out << "#\n";
    out << "QT       += core gui" << "\n";
    out << "\n";
    out << "greaterThan(QT_MAJOR_VERSION, 4): QT += widgets" << "\n";
    out << "\n";
    out << "TARGET = " << m_ProjectName << "\n";
    out << "TEMPLATE = app" << "\n";
    out << "\n";
    out << "QMAKE_MAC_SDK = macosx10.11" << "\n";
    out << "\n";
    out << "SOURCES += main.cpp\\" << "\n";
    out << "mainwindow.cpp \\" << "\n";
    out << m_ProjectName << "_Canvas.cpp" << "\n";
    out << "\n";
    out << "HEADERS  += mainwindow.h \\" << "\n";
    out << m_ProjectName <<"_Canvas.h" << "\n";
    out << "\n";
    out << "FORMS    += mainwindow.ui" << "\n";
    out << "\n";
    out << "OTHER_FILES += \\" << "\n";
    out << m_ProjectName << "_Shader.frag \\" << "\n";
    out << m_ProjectName << "_Shader.vert" << "\n";
    out << "\n";
    out << "EIO_SDK_QT_PATH =" << m_SDKPath << "\n";
    out << "include($$EIO_SDK_QT_PATH/eio_qte.pri)" << "\n";

    dotPro.close();


    //-------------------------------- main.cpp
    QString mainPath = QString("%1/main.cpp").arg(m_ProjectDirectory);
    QFile main(mainPath);
    main.open(QIODevice::WriteOnly | QIODevice::Text);

    QTextStream mainout(&main);
    mainout << "//------------------------------------------------------------------------\n";
    mainout << "//\n";
    mainout << "// File generated by The Emerger from emergent.io\n";
    mainout << "//\n";
    mainout << "// " << QDateTime::currentDateTime().toString() << "\n";
    mainout << "//\n";
    mainout << "// " << m_Author <<"\n";
    mainout << "//\n";
    mainout << "//------------------------------------------------------------------------\n";
    mainout << "\n";
    mainout << "#include \"mainwindow.h\"" << "\n";
    mainout << "#include <QApplication>" << "\n";
    mainout << "\n";
    mainout << "int main(int argc, char *argv[])" << "\n";
    mainout << "{" << "\n";
    mainout << "QSurfaceFormat format;" << "\n";
    mainout << "format.setDepthBufferSize( 24 );" << "\n";
    mainout << "format.setSamples( 8 );" << "\n";
    mainout << "\n";
    mainout << "QSurfaceFormat::setDefaultFormat(format);" << "\n";
    mainout << "\t" << "QApplication a(argc, argv);" << "\n";
    mainout << "\t" << "MainWindow w;" << "\n";
    mainout << "\t" << "w.show();" << "\n";
    mainout << "\n";
    mainout << "\t" << "return a.exec();" << "\n";
    mainout << "}" << "\n";
    mainout << "\n";

    main.close();

    //-------------------------------- mainwindow.h
    QString mainwindowhPath = QString("%1/mainwindow.h").arg(m_ProjectDirectory);
    QFile mainwindowh(mainwindowhPath);
    mainwindowh.open(QIODevice::WriteOnly | QIODevice::Text);

    QTextStream mainwindowhout(&mainwindowh);
    mainwindowhout << "//------------------------------------------------------------------------\n";
    mainwindowhout << "//\n";
    mainwindowhout << "// File generated by The Emerger from emergent.io\n";
    mainwindowhout << "//\n";
    mainwindowhout << "// " << QDateTime::currentDateTime().toString() << "\n";
    mainwindowhout << "//\n";
    mainwindowhout << "// " << m_Author <<"\n";
    mainwindowhout << "//\n";
    mainwindowhout << "//------------------------------------------------------------------------\n";
    mainwindowhout << "\n";
    mainwindowhout << "#ifndef MAINWINDOW_H" << "\n";
    mainwindowhout << "#define MAINWINDOW_H" << "\n";
    mainwindowhout << "\n";
    mainwindowhout << "#include <QMainWindow>" << "\n";
    mainwindowhout << "#include \"eio_qte_Include.h\"" << "\n";
    mainwindowhout << "#include \"" << m_ProjectName << "_Canvas.h\"" << "\n";;
    mainwindowhout << "\n";
    mainwindowhout << "namespace Ui {" << "\n";
    mainwindowhout << "class MainWindow;" << "\n";
    mainwindowhout << "}" << "\n";
    mainwindowhout << "\n";
    mainwindowhout << "class MainWindow : public QMainWindow" << "\n";
    mainwindowhout << "{" << "\n";
    mainwindowhout << "\t" << "Q_OBJECT" << "\n";
    mainwindowhout << "\n";

    mainwindowhout << "public:" << "\n";
    mainwindowhout << "\t" << "explicit MainWindow(QWidget *parent = 0);" << "\n";
    mainwindowhout << "\t" << "~MainWindow();" << "\n";
    mainwindowhout << "\n";
    mainwindowhout << "\t" << m_ProjectName << "_Canvas *m_Canvas;" << "\n";
    mainwindowhout << "\n";
    mainwindowhout << "\t" << "void resizeEvent(QResizeEvent *);" << "\n";
    mainwindowhout << "\n";
    mainwindowhout << "private:" << "\n";
    mainwindowhout << "\t" << "Ui::MainWindow *ui;" << "\n";
    mainwindowhout << "\n";
    mainwindowhout << "};" << "\n";
    mainwindowhout << "\n";

    mainwindowhout << "#endif // MAINWINDOW_H";

    mainwindowh.close();

    //-------------------------------- mainwindow.cpp
    QString mainwindowcppPath = QString("%1/mainwindow.cpp").arg(m_ProjectDirectory);
    QFile mainwindowcpp(mainwindowcppPath);
    mainwindowcpp.open(QIODevice::WriteOnly | QIODevice::Text);

    QTextStream mainwindowcppout(&mainwindowcpp);

    mainwindowcppout << "#include \"mainwindow.h\"" << "\n";
    mainwindowcppout << "#include \"ui_mainwindow.h\"" << "\n";
    mainwindowcppout << "\n";
    mainwindowcppout << "MainWindow::MainWindow(QWidget *parent) :" << "\n";
    mainwindowcppout << "    QMainWindow(parent)," << "\n";
    mainwindowcppout << "    ui(new Ui::MainWindow)" << "\n";
    mainwindowcppout << "{" << "\n";
    mainwindowcppout << "    ui->setupUi(this);" << "\n";
    mainwindowcppout << "\n";
    mainwindowcppout << "    m_Canvas = new " << m_ProjectName << "_Canvas(this);" << "\n";
    mainwindowcppout << "}" << "\n";
    mainwindowcppout << "\n";
    mainwindowcppout << "MainWindow::~MainWindow()" << "\n";
    mainwindowcppout << "{" << "\n";
    mainwindowcppout << "    delete ui;" << "\n";
    mainwindowcppout << "}" << "\n";
    mainwindowcppout << "\n";
    mainwindowcppout << "void MainWindow::resizeEvent(QResizeEvent *)" << "\n";
    mainwindowcppout << "{" << "\n";
    mainwindowcppout << "    m_Canvas->resize(this->size());" << "\n";
    mainwindowcppout << "}" << "\n";

    mainwindowcpp.close();


    //-------------------------------- mainwindow.ui
    QString mainwindowuiPath = QString("%1/mainwindow.ui").arg(m_ProjectDirectory);
    QFile mainwindowui(mainwindowuiPath);
    mainwindowui.open(QIODevice::WriteOnly | QIODevice::Text);

    QTextStream mainwindowuiout(&mainwindowui);

    //mainwindowuiout << " " << "\n";

    //mainwindowuiout << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" << "\n";
    mainwindowuiout << "<ui version=\"4.0\">" << "\n";
    mainwindowuiout << "<class>MainWindow</class>" << "\n";
    mainwindowuiout << "<widget class=\"QMainWindow\" name=\"MainWindow\">" << "\n";
    mainwindowuiout << "<property name=\"geometry\">" << "\n";
    mainwindowuiout << "<rect>" << "\n";
    mainwindowuiout << "<x>0</x>" << "\n";
    mainwindowuiout << "<y>0</y>" << "\n";
    mainwindowuiout << "<width>400</width>" << "\n";
    mainwindowuiout << "<height>300</height>" << "\n";
    mainwindowuiout << "</rect>" << "\n";
    mainwindowuiout << "</property>" << "\n";
    mainwindowuiout << "<property name=\"windowTitle\">" << "\n";
    mainwindowuiout << "<string>MainWindow</string>" << "\n";
    mainwindowuiout << "</property>" << "\n";
    mainwindowuiout << "<widget class=\"QWidget\" name=\"centralWidget\"/>" << "\n";
    mainwindowuiout << "</widget>" << "\n";
    mainwindowuiout << "<layoutdefault spacing=\"6\" margin=\"11\"/>" << "\n";
    mainwindowuiout << "<resources/>" << "\n";
    mainwindowuiout << "<connections/>" << "\n";
    mainwindowuiout << "</ui>" << "\n";

    mainwindowui.close();

    //-------------------------------- Shader - Vertex
    QFile vertShaderTemplate(QString("%1/eio_qte_graphics/eio_qte_Shader_Desktop_Template.vert").arg(m_SDKPath));
    vertShaderTemplate.open(QIODevice::ReadOnly | QIODevice::Text);
    QByteArray tempBA = vertShaderTemplate.readAll();

    QFile vertShader(QString("%1/%2_Shader.vert").arg(m_ProjectDirectory).arg(m_ProjectName));
    vertShader.open(QIODevice::WriteOnly | QIODevice::Text);

    vertShader.write(tempBA);
    vertShader.close();

    //-------------------------------- Shader - Fragment
    QFile fragShaderTemplate(QString("%1/eio_qte_graphics/eio_qte_Shader_Desktop_Template.frag").arg(m_SDKPath));
    fragShaderTemplate.open(QIODevice::ReadOnly | QIODevice::Text);
    tempBA = fragShaderTemplate.readAll();

    QFile fragShader(QString("%1/%2_Shader.frag").arg(m_ProjectDirectory).arg(m_ProjectName));
    fragShader.open(QIODevice::WriteOnly | QIODevice::Text);

    fragShader.write(tempBA);
    fragShader.close();


    //-------------------------------- Canvas.h
    QString canvashPath = QString("%1/%2_Canvas.h").arg(m_ProjectDirectory).arg(m_ProjectName);
    QFile canvash(canvashPath);
    canvash.open(QIODevice::WriteOnly | QIODevice::Text);

    QTextStream canvashout(&canvash);

    canvashout << "#ifndef " << QString(m_ProjectName).toUpper() << "_CANVAS_H" << "\n";
    canvashout << "#define " << QString(m_ProjectName).toUpper() << "_CANVAS_H" << "\n";
    canvashout << "\n";
    canvashout << "#include \"eio_qte_Include.h\"" << "\n";
    canvashout << "\n";
    canvashout << "class " << m_ProjectName << "_Canvas : public Canvas" << "\n";
    canvashout << "{" << "\n";
    canvashout << "    Q_OBJECT" << "\n";
    canvashout << "public:" << "\n";
    canvashout << "    explicit " << m_ProjectName << "_Canvas(QWidget *parent = 0) : Canvas(parent) {}" << "\n";
    canvashout << "\n";
    canvashout << "    void setup();" << "\n";
    canvashout << "    void draw();" << "\n";
    canvashout << "\n";
    canvashout << "    int m_Time = 0;" << "\n";
    canvashout << "\n";
    canvashout << "    Shader m_Shader;" << "\n";
    canvashout << "    Mesh *m_Mesh;" << "\n";
    canvashout << "\n";
    canvashout << "};" << "\n";
    canvashout << "\n";
    canvashout << "#endif // " << QString(m_ProjectName).toUpper() << "_CANVAS_H" << "\n";

    canvash.close();


    //-------------------------------- Canvas.cpp
    QString canvascppPath = QString("%1/%2_Canvas.cpp").arg(m_ProjectDirectory).arg(m_ProjectName);
    QFile canvascpp(canvascppPath);
    canvascpp.open(QIODevice::WriteOnly | QIODevice::Text);

    QTextStream canvascpout(&canvascpp);

    canvascpout << "#include \"" << m_ProjectName << "_Canvas.h\"" << "\n";
    canvascpout << "\n";
    canvascpout << "void " << m_ProjectName << "_Canvas::setup()" << "\n";
    canvascpout << "{" << "\n";
    canvascpout << "    //TWOD = 1;" << "\n";
    canvascpout << "\n";
    canvascpout << "    m_Shader.loadFragmentShader(\"" << QString(m_ProjectDirectory).append("/").append(m_ProjectName) << "_Shader.frag\");" << "\n";
    canvascpout << "    m_Shader.loadVertexShader(\"" << QString(m_ProjectDirectory).append("/").append(m_ProjectName) << "_Shader.vert\");" << "\n";
    canvascpout << "    m_Shader.link();" << "\n";
    canvascpout << "\n";
    canvascpout << "    m_Mesh = new Mesh;" << "\n";
    canvascpout << "    m_Mesh->makePlane(10, 10, 1);" << "\n";
    canvascpout << "    m_Mesh->setColor(QVector4D(1,0.5,0.5,1.0));" << "\n";
    canvascpout << "    m_Mesh->createBuffers();" << "\n";
    canvascpout << "    m_Shader.setAttributeBuffersFromMesh(m_Mesh);" << "\n";
    canvascpout << "\n";
    canvascpout << "    m_Shader.bind();" << "\n";
    canvascpout << "}" << "\n";
    canvascpout << "\n";
    canvascpout << "void " << m_ProjectName << "_Canvas::draw()" << "\n";
    canvascpout << "{" << "\n";
    canvascpout << "    m_Time += m_Interval;" << "\n";
    canvascpout << "\n";
    canvascpout << "    m_Shader.setUniformValue(\"u_time\", float(m_Time));" << "\n";
    canvascpout << "    m_Shader.setUniformValue(\"u_cameraPosition\", QVector3D(m_ArcBall->_xyz));" << "\n";
    canvascpout << "    m_Shader.setUniformValue(\"u_mvp_matrix\", m_ProjectionMatrix * m_ArcBall->_matrix);" << "\n";
    canvascpout << "\n";
    canvascpout << "    m_Mesh->drawMesh();" << "\n";
    canvascpout << "}" << "\n";

    canvascpp.close();

}

void MainWindow::slot_SetSDKPath()
{
    m_SDKPath = QFileDialog::getExistingDirectory(this, tr("Open Directory"),"/", QFileDialog::ShowDirsOnly | QFileDialog::DontResolveSymlinks);
}
